@{
    ViewData["Title"] = "Weatherescu";
}

<div class="main-container" id="home">
    <div class="weather-container">
        <div class="search-container">
            <input type="text" placeholder="Enter city name" class="search-bar form-control">
            <button class="btn btn-primary search-button">Search</button>
        </div>

        <div class="weather-details" style="display: none;">
            <h2 class="city-name"></h2>
            <p class="temperature"></p>
            <img src="" alt="Weather Icon" class="icon">
            <p class="weather-description"></p>
            <button class="btn btn-primary add-favorite">Add to Favorites</button>
        </div>

        <div class="hourly-forecast">
            <!-- Hourly forecast will be added here -->
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // This function will run after the page and all other scripts have fully loaded
        window.addEventListener('load', function() {
            // Check if there's a city parameter in the URL
            const urlParams = new URLSearchParams(window.location.search);
            const city = urlParams.get('city');

            if (city) {
                // Fill the search bar with the city name
                const searchBar = document.querySelector('.search-bar');
                if (searchBar) {
                    searchBar.value = city;
                }

                // Directly call the weather API with the city
                const apiKey = '0978e2504fb80d1dbb02f3e18e711672';
                const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;
                const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`;

                // Get the current weather
                fetch(weatherUrl)
                    .then(response => response.json())
                    .then(data => {
                        // Update the UI with weather data
                        const weatherDetails = document.querySelector('.weather-details');
                        const cityName = document.querySelector('.city-name');
                        const temperature = document.querySelector('.temperature');
                        const weatherIcon = document.querySelector('.icon');
                        const weatherDescription = document.querySelector('.weather-description');
                        const addFavoriteButton = document.querySelector('.add-favorite');

                        cityName.textContent = data.name;
                        temperature.textContent = `${Math.round(data.main.temp)}°C`;
                        weatherIcon.src = `http://openweathermap.org/img/wn/${data.weather[0].icon}@@2x.png`;
                        weatherDescription.textContent = data.weather[0].description;
                        weatherDetails.style.display = 'block';

                        document.querySelector('.weather-container').classList.add('expanded');

                        // Update favorite button state
                        const favorites = JSON.parse(localStorage.getItem('favorites')) || [];
                        if (favorites.includes(data.name)) {
                            addFavoriteButton.textContent = 'Remove from Favorites';
                            addFavoriteButton.classList.remove('btn-primary');
                            addFavoriteButton.classList.add('btn-danger');
                        } else {
                            addFavoriteButton.textContent = 'Add to Favorites';
                            addFavoriteButton.classList.remove('btn-danger');
                            addFavoriteButton.classList.add('btn-primary');
                        }
                    })
                    .catch(error => console.error('Error fetching weather data:', error));

                // Get the forecast
                fetch(forecastUrl)
                    .then(response => response.json())
                    .then(data => {
                        const hourlyForecastContainer = document.querySelector('.hourly-forecast');

                        hourlyForecastContainer.innerHTML = '';
                        const timezoneOffset = data.city.timezone;
                        const forecastList = data.list.slice(0, 8);

                        forecastList.forEach(forecast => {
                            const forecastElement = document.createElement('div');
                            forecastElement.classList.add('forecast-item');

                            const localTime = new Date((forecast.dt + timezoneOffset) * 1000)
                                .toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                            const temp = `${Math.round(forecast.main.temp)}°C`;
                            const icon = `http://openweathermap.org/img/wn/${forecast.weather[0].icon}.png`;
                            const description = forecast.weather[0].description;

                            forecastElement.innerHTML = `
                                <p>${localTime}</p>
                                <img src="${icon}" alt="Weather Icon">
                                <p>${temp}</p>
                                <p>${description}</p>
                            `;

                            hourlyForecastContainer.appendChild(forecastElement);
                        });
                    })
                    .catch(error => console.error('Error fetching forecast data:', error));
            }
        });
    </script>
}